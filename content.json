{"pages":[{"title":"404","text":"","path":"404/index.html","date":"05-31","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"05-31","excerpt":""},{"title":"about","text":"##第一次弄个人网站 ###开心 哈哈哈","path":"about/index.html","date":"05-31","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"05-31","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"05-31","excerpt":""}],"posts":[{"title":"Git学习笔记","text":"Git学习笔记，超好用的版本管理控制工具，工作效率直线上升！ Git学习笔记前言Git是一种版本控制管理工具，它是开源的。另一个比较有名的工具是SVN。Git与它的区别是：即使在无网络状态下也可以工作。Git可以和github（大型的Git托管平台）配合使用，使得代码的重新利用和修改极其的方便。安装Git 初始化一个仓库安装号Git之后，打开Git Bash，在一个你想作为仓库的文件夹下（也可以理解为某个项目文件夹），执行git init命令，现在这个文件夹就是一个Git仓库了，它可以控制你项目的版本，像一个时间机器一样。使用ls -a可以看到隐藏的.git文件。 注：Git中分为工作区域 暂存区域 以及仓库 常用命令 添加文件到Git工作区中git add 将工作区中的内容同步到暂存区域git commit -m &quot;同步说明&quot; 查看当前git的同步状态git status 查看工作区代码与暂存区代码的区别git diff 比较工作去中某文件与已提交的文件区别git diff HEAD -- &lt;filename.ext&gt; 查看git版本、同步情况和历史版本git log 控制查看结果为一行git log --pretty=oneline 查看历史分支图git log --graph --pretty=onelne --abbrev-commit 查看版本变动后之前的版本号 方便在回退错误后找回git reflog 版本控制git中使用Hashcode来记录不同的版本，每个版本都会在.git文件中记录，当我们需要回退版本或者取消版本回退时，都可以利用下面的命令来进行版本跳跃~ 回退到上上一个版本git reset --hard HEAD^^git reset --hard 上上的版本号 版本号不用写全，可以只写前几位 撤销暂存区域对应文件的修改git reset HEAD -- &lt;filename.ext&gt; 取消工作区中的修改，回退到上一个add或commitgit checkout -- &lt;filename&gt; 远程仓库命令在执行远程仓库命令之前，需要确认你的github上的sshkey生成并且保存了 在仓库的终端输入 ssh-keygen -t -C &quot;username&quot; (注：username时你github上的用户名) 一路回车，根据提示在默认路径下找到ssh文档，复制里面的ssh-sra到github的setting下 在github上创建一个和本地仓库（文件夹）同名的仓库，使用命令：git remote add origin git@github.com:用户名/仓库命.git(origin为远程仓库名，可以修改，一般默认) 通过命令git push -u origin master即可推送本地仓库中的文件到远程仓库中了。首次推送需要加-u，将远程仓库和本地仓库关联起来，之后的所有推送只需要输入git push origin master即可 在github上新建仓库后，可以直接从远程仓库克隆到本地 git clone git@github.com:username/respository_name.git git clone https://github.com/username/respository_name.git branch（分支）本地分支分支的创建有助于项目安全方便的推进，通过分支开发后合并到主分支当中去 创建分支：git branch branch_name 切换分支：git checkout branch_name 上边俩行命可以合到一起：git checkout -b branch_name 合并某分支到当前分支：git merge branch_name 合并分支采用fast-merge方式合并时不会留下历史记录，可强制停用fast模式：git merger --no-ff -m &quot;合并分支并留下记录&quot; branch_name 当合并有分歧的时候，在分歧的文件中Git会用 123451文件&lt;&lt;&lt;&lt;&lt;&lt; 分歧内容 =======分歧内容 &gt;&gt;&gt;&gt;&gt;&gt;文件2 的形式标注出来，到对应的文件中修改后，add、commit，再进行merge即可。 合并分支后可以使用命令删除被合并的分支：git branch -d branch_name需要删除未同步分支时可将-d 改为-D 远程分支 添加远程分支 通过github直接创建branch 通过本地创建branch后推送到远端git push origin remote_branch_name 注：在提交分支时，有可能你的搭档已经提交了内容，而与你所提交的内容产生了分歧，此时会报错。首先要通过git pull命令将内容拉取到本地，拉取时可能会拉取失败，因为没有同步分支连接，需要通过命令：git branch --set-upsteam-to=origin/branch_name branch_name可以完成链接。 删除远程分支git push origin :branch_name 删除远程仓库git push origin :username/branch_name 将远程分支同步到本地分支git checkout -b branch_name orgin/branch_name","path":"2019/06/01/Git学习笔记/","date":"06-01","excerpt":"Git学习笔记，超好用的版本管理控制工具，工作效率直线上升！","tags":[{"name":"note","slug":"note","permalink":"https://starsuomali.github.io/tags/note/"},{"name":"Git","slug":"Git","permalink":"https://starsuomali.github.io/tags/Git/"}]},{"title":"关于Markdown语法笔记","text":"第一次用Markdown写笔记,看看学习的成果！ markdown语法小计 有点简洁 有点方便 学会语法不需要太长时间(5分钟?) 一、标题一个#代表一级标题俩个#则代表二级标题例如： 123# 一级标题## 二级标题### 三级标题 效果： 一级标题二级标题三级标题注：标准语法末尾的#需要与文字相隔1个空格 二、字体 加粗：文字的左右分别用俩个*号包起来 效果：内容 斜体：文字的左右分别用一个*号包起来 效果：内容 斜体加粗:文字的左右分别用三个*包起来 效果：内容 删除体：要加删除线的文字左右分别用俩个~号包起来 效果：内容三、引用在引用的文字前加&gt;即可。引用可以嵌套： 123&gt;1&gt;&gt;2&gt;&gt;&gt;&gt;&gt;3 效果： 1 2 3 四、分割线三个或者三个以上的-或者*都可以分割 12---**** 效果： 五、图片 语法：[图片alt](图片地址 ‘’图片title’’)图片alt 是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移动到图片上面的时候就会看到。可以直接通过工具上传本地图片 六、超链接 语法：[超链接名](超链地址 ‘’超链接title’’)title可加可不加 注：Markdown本身语法不支持链接在新的页面中打开，如果想要在新的页面中打开可以使用html语法中的&lt;a&gt;来代替 七、列表 无序列表用-+*任何一种都可以 有序列表 数字加点 如：1.列表内容 列表镶嵌 上下一级之间相隔三个空格即可 八、表格 语法： 1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 效果： 表头 表头 表头 内容 内容 内容 内容 内容 内容 第二行作用是分割表头和内容 有一个就行，多加几个是为了对齐文字默认居左 在-的俩边加:代表居中 注：原生的语法表的俩边都需要用|包起来，此处省略。 九、代码单行代码：代码之间分别用一个反引号包起来 ‘我是代码’ 代码块：代码之间分别用三个反引号包起来，且均独占一行 (```) 代码... 代码... 代码... (```)注：防止转译加了小括号，实际没有 十、流程图暂时用不到，就先不记了~（￣へ￣）","path":"2019/06/01/关于Markdown语法笔笔记/","date":"06-01","excerpt":"第一次用Markdown写笔记,看看学习的成果！","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://starsuomali.github.io/tags/Markdown/"},{"name":"EditTools","slug":"EditTools","permalink":"https://starsuomali.github.io/tags/EditTools/"}]},{"title":"Hello World","text":"最初的”hello world”！ Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/05/30/hello-world/","date":"05-30","excerpt":"最初的”hello world”！","tags":[{"name":"helloworld","slug":"helloworld","permalink":"https://starsuomali.github.io/tags/helloworld/"}]}]}